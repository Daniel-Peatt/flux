
### Goals / Work Log 

Short Term Goals:
    - Comment over check challenge status hook 
    - Work on the current CSS for dashboard widgits

Long Term Goals:
    - Start getting the dashboard widgets connected to a database table.
    - Add the password reset feature. 

Features : 
    - Add contact page
    - Add About us page
    - Add Profile page
    
Known issues: 
    - When the user is timed out, the sever only checks is the login token is present, and not if it is valid.
    This is causing the some pages to act like the user is logged in, but in reality they are not.
    - I need to add more conditions to the task buttons so it only highlights when a task is 
    checked off. 

03-06-25 : I added the post api on the backend for sending form data to the database. COMMIT
03-10-25 : I am having issues getting the create challenge form submitted to the database. something to do with 
    null value for user_id in the row. 
03-11-25 : I finish the form for creating a challenge and the information goes to the database, besides the task. 
    I also started to learn and work on JWT authentication. I believe if I impliment this now it will be less annoying 
    than adding it later on. COMMIT 
03-12-25 : I added password hashing on the POST to the database using bcrypt, I know need to un-hash the password for logining in, 
    and continue videos on YT about JWT. 
03-13-25 : I have added the login API that will compare the user info typed in to the info in the database, using bycrypt.compare.
03-14-25 : I added the creation of a token when the user logs in.
    I then added the Middleware to authenticate the token and ensure it is still valid. (This can be added to api calls to get the logged in users info)
    I created a get challenge api route that gets the user info based on a login token. 
    I need to find out how to set up the page routes to recieve the token information.
03-16-25 : I got the fetch call to the dashboard, and set up a grid / flex layout for the dashbaord. 
    I need to get the task be sent to the database once when the create challenge is made. DONE
    I need to parse the task to get them to show up separetly on a list. 
03-17-25 : Added pie chart to days reamining compomnent, and started to fix task list on dashbaord. 
03-18-25 : Got the task component to populate on the dashboard. -COMMIT 
03-19-25 : GOAl: Display the Calendar numbers.
03-24-25 : Today I added a drop down on the header for links around the app. I also made some of the links only visable
    when the user is logged in. I need to add the code to get the delete challenge button working. 
03-25-25 : Today I added the button to delete the challenge. I need to route the dashboard button in the drop down 
    to go to the createChallenge page when there is no challenge linked to that user.
03-26-25 : Today I added the ability to delete task from the list when creating the challenge. I also added the 
    checks to make sure the user fills out the create challenge form before proceeding, the webpage will show 
    an error at the bottom if this happens.
03-31-25 : Today I fixed where the when the user presses enter on the create challenge page, it doesn't automatically 
    submit the form. 
06-24-25 : Today I added the current date to the dashboard
06-25-25 : Today I added the toggle for the class on the tasks in the dashboard, so that a line runs through the text.
    I also added a column to the SQL to store the boolean state of task being completed on the checklist. 
    I need to have the checklist update the database when checking a task, so when the webpage is reloaded it will
    save the users progress. 
06-29-25 : I changed checkedtasks in the database to be a nested array. I am now working on updating the database when I check off a task
    so it will stay updated in the dashboard even when I log off. 
    I added the API route to update the database checkedtasks at a specific index.
    now I just need to do the logic on the client side to undestand that the first index is the day and the second index 
    is the task.
07-02-25 : It might have been the toughest task yet, but I got the client to load the task from the database to be checked
    off when the browser is loaded. SO, the user can check a task off and it will remain checked off even of they logout. 
07-03-25 : I got the calandar cell to update to green if all the task are true for the date of the cell. I also lifted a state in task.js 
    to allow the current day update without refreshing the page. (By triggering the useEffect)